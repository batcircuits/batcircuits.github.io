{"version":3,"sources":["App.js","index.js"],"names":["batTreeCharacteristic","BatMachine","BatState","numPatterns","currentPattern","numAnimations","currentAnimation","makeButton","data","name","Header","props","title","this","React","Component","App","onClickConnect","bind","handleChangeBlah","makeAniButton","state","connected","allPatterns","allAnimations","filters","push","options","console","log","JSON","stringify","navigator","bluetooth","requestDevice","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","startNotifications","setState","writeValueWithoutResponse","TextEncoder","encode","catch","error","event","respStr","String","fromCharCode","apply","Uint8Array","target","value","buffer","parseInt","localPatterns","index","allPaterns","queryString","localAnimations","className","onClick","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAIIA,E,0FAmBEC,EAIU,GAJVA,EAOa,GAPbA,EAUU,GAVVA,EAae,GAKjBC,EAjBQ,GAkBRC,EAAc,EACdC,EAAiB,EACjBC,EAAgB,EAChBC,EAAmB,EAIvB,SAASC,EAAWC,GAClB,OACE,6BACE,iCACKA,EAAKC,QAFHD,EAAKC,M,IAQZC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAQD,EAAMC,MAJF,E,0CAOnB,WACE,OACE,8BACE,6BAAKC,KAAKD,c,GAXGE,IAAMC,WA0NZC,E,kDAxMb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAGDM,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAErB,EAAKG,MAAQ,CACXC,WAAW,EACXC,YAAa,GACbC,cAAe,IAXA,E,kDAenB,WAAkB,IAAD,OAEXC,EAAU,GACdA,EAAQC,KAAK,CAACjB,KAAM,aACpB,IAAIkB,EAAU,GACdA,EAAQF,QAAUA,EAClBG,QAAQC,IAAI,kCACZD,QAAQC,IAAI,QAAUC,KAAKC,UAAUJ,IAGrCK,UAAUC,UAAUC,cAAcP,GAGjCQ,MAAK,SAAAC,GAGJ,OAFAR,QAAQC,IAAI,gCACIO,EACKC,KAAKC,aAI3BH,MAAK,SAAAI,GAEJ,OADAX,QAAQC,IAAI,8BACLU,EAAOC,kBAAkB,UAIjCL,MAAK,SAAAM,GAEJ,OADAb,QAAQC,IAAI,oCACLY,EAAQC,kBAAkB,UAIlCP,MAAK,SAAAQ,GACJf,QAAQC,IAAI,mCACZ7B,EAAwB2C,GACFC,iBAAiB,6BAA8B,EAAKzB,kBAC1EnB,EAAsB6C,qBAGtB,EAAKC,UAAS,WACZ,MAAO,CACLxB,WAAW,SAIhBa,MAAK,WACJjC,EAAWD,EACXD,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAO,gBAE1EC,OAAM,SAAAC,GACLvB,QAAQC,IAAI,UAAYsB,Q,8BAQ5B,SAAiBC,GACf,IAAIC,EAAUC,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWL,EAAMM,OAAOC,MAAMC,SAChF,GAAgB,QAAZP,GAKJ,GAAInD,IAAaD,EAAwB,CAKvC,GAJAE,EAAc0D,SAASR,GACvBzB,QAAQC,IAAI,6BAA+B1B,GAGvB,IAAhBA,EAEF,YADAyB,QAAQC,IAAI,uEAKd7B,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAO,eACzE7C,EAAiB,EACjBF,EAAWD,OAGR,GAAIC,IAAaD,EAA2B,CAE/C2B,QAAQC,IAAI,WAAazB,EAAiB,KAAOiD,GACjD,IAAIS,EAAgBjD,KAAKQ,MAAME,YAgB/B,GAdAuC,EAAcpC,KAAK,CACjBjB,KAAM4C,EACNU,MAAO3D,IAETA,IAEAS,KAAKiC,UAAS,WACZ,MACE,CACEkB,WAAYF,MAKd3D,EAAcC,EAAgB,CAChC,IAAI6D,EAAc,UAAY7D,EAAiB,KAC/CJ,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAOgB,SAGzErC,QAAQC,IAAI,uCACZD,QAAQC,IAAIiC,GACZ5D,EAAWD,EACXD,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAO,kBAIxE,GAAI/C,IAAaD,EAAwB,CAG5C,GAAsB,KAFtBI,EAAgBwD,SAASR,IAIvB,YADAzB,QAAQC,IAAI,mCAKd7B,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAO,eACzE/C,EAAWD,OAGR,GAAIC,IAAaD,EAA6B,CACjD2B,QAAQC,IAAI,aAAevB,EAAmB,KAAO+C,GACrD,IAAIa,EAAkBrD,KAAKQ,MAAMG,cAcjC,GAbA0C,EAAgBxC,KAAK,CACnBjB,KAAM4C,EACNU,MAAOzD,IAGTA,IAEAO,KAAKiC,UAAS,WACZ,MAAO,CACLtB,cAAe0C,MAIf7D,EAAgBC,EAAkB,CACpC,IAAI2D,EAAc,UAAY3D,EAAmB,KACjDN,EAAsB+C,2BAA0B,IAAIC,aAAcC,OAAOgB,SAGzErC,QAAQC,IAAI,yCACZD,QAAQC,IAAIqC,SAtFdtC,QAAQC,IAAI,sC,2BA6FhB,SAAcrB,GACZ,OACE,6BACE,iCACKA,EAAKC,QAFHD,EAAKC,Q,oBASlB,WACE,OACE,sBAAK0D,UAAU,MAAf,UACE,cAAC,EAAD,CAAQvD,MAAM,oBACZC,KAAKQ,MAAMC,WACb,wBAAQ8C,QAASvD,KAAKI,eAAtB,qBAIA,6BACGJ,KAAKQ,MAAME,YAAY8C,IAAI9D,EAAYM,QAE1C,6BACGA,KAAKQ,MAAMG,cAAc6C,IAAIxD,KAAKO,wB,GAlM3BN,IAAMC,WCvExBuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c9d71cff.chunk.js","sourcesContent":["import React from \"react\"\nimport './App.css';\n\nvar batTreeDevice;\nvar batTreeCharacteristic;\n\n// State machine\n// 1. Connect, and all that crap\n// 2. Query for number of patterns\n// 3. Gather all of the patterns, and print them\n// 4. Query for number of animations\n// 5. Gather all of the animations, and print them\n// 6. Hang out ready to rock!\n//    -- Open settings tab\n//    7. Query brightness\n//    8. Query volume\n//    9. Set brightness\n//    9a. Get brightness\n//    10. Set volume\n//    10a. Get volume\n// 11. Set pattern or animation\n// 12. Turn off the tree.\n\nconst BatMachine = {\n  connect : {\n    //nextState: queryNumPat\n  },\n  queryNumPat : {\n    //nextState : gatherPatterns\n  },\n  gatherPatterns : {\n    //nextState : queryNumAni\n  },\n  queryNumAni : {\n    //nextState : queryAnimations\n  },\n  gatherAnimations : {\n\n  }\n}\n\nlet BatState = BatMachine.connect;\nlet numPatterns = 0;\nlet currentPattern = 0;\nlet numAnimations = 0;\nlet currentAnimation = 0;\n\n\n\nfunction makeButton(data) {\n  return (\n    <li key={data.name}>\n      <button>\n          {data.name}\n      </button>\n      </li>\n  );\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set title property\n    this.title = props.title;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.title}</h1>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set this binding\n    this.onClickConnect = this.onClickConnect.bind(this);\n    this.handleChangeBlah = this.handleChangeBlah.bind(this);\n    this.makeAniButton = this.makeAniButton.bind(this);\n\n    this.state = {\n      connected: false,\n      allPatterns: [],\n      allAnimations: []\n    }\n  }\n\n  onClickConnect() {\n    // Try to find the BAT Tree device\n    let filters = [];\n    filters.push({name: \"BAT Tree\"});\n    let options = {};\n    options.filters = filters;\n    console.log('Reqeusting Bluetooth Device...');\n    console.log('with ' + JSON.stringify(options));\n\n    // Request the device with the options\n    navigator.bluetooth.requestDevice(options)\n\n    // If success, connect to GATT server\n    .then(device => {\n      console.log('Connecting to GATT Server...');\n      batTreeDevice = device;\n      return batTreeDevice.gatt.connect();\n    })\n\n    // Grab the primary service for the BLE controller\n    .then(server => {\n      console.log('Getting Primary Service...');\n      return server.getPrimaryService(0xFFE0);\n    })\n\n    // Connect to the characteristic\n    .then(service => {\n      console.log('Getting Custom Characteristic...');\n      return service.getCharacteristic(0xFFE1);\n    })\n\n    // Register callback when connected to characteristic\n    .then(characteristic => {\n      console.log('We got all the way to the end!');\n      batTreeCharacteristic = characteristic;\n      batTreeCharacteristic.addEventListener('characteristicvaluechanged', this.handleChangeBlah);\n      batTreeCharacteristic.startNotifications();\n\n      //  Update the state so connect goes away\n      this.setState(() => {\n        return {\n          connected: true\n        }\n      })\n    })\n    .then(() => {\n      BatState = BatMachine.queryNumPat;\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumPat\\n'));\n    })\n    .catch(error => {\n      console.log('WRONG! ' + error);\n    });\n\n  }\n\n\n\n  \n  handleChangeBlah(event) {\n    let respStr = String.fromCharCode.apply(null, new Uint8Array(event.target.value.buffer));\n    if (respStr === \"EOE\") {\n      console.log(\"Let us ignore the EOE, shall we?\");\n      return;\n    }\n\n    if (BatState === BatMachine.queryNumPat) {\n      numPatterns = parseInt(respStr);\n      console.log('The number of patterns is ' + numPatterns);\n\n      // Now that we have the number of patterns, let's get them\n      if (numPatterns === 0) {\n        console.log('Uh... I guess I need to handle this. But for now, it will break me.');\n        return;\n      }\n\n      // Send the query for the first pattern to start the fun\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetPat 0\\n'));\n      currentPattern = 0;\n      BatState = BatMachine.gatherPatterns;\n    }\n\n    else if (BatState === BatMachine.gatherPatterns) {\n\n      console.log('Pattern ' + currentPattern + ': ' + respStr);\n      let localPatterns = this.state.allPatterns;\n\n      localPatterns.push({\n        name: respStr,\n        index: currentPattern\n      })\n      currentPattern++;\n\n      this.setState(() => {\n        return (\n          {\n            allPaterns: localPatterns\n          }\n        )\n      })\n\n      if (numPatterns > currentPattern) {\n        let queryString = 'GetPat ' + currentPattern + '\\n';\n        batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      }\n      else {\n        console.log('I have received all of my patterns?');\n        console.log(localPatterns);\n        BatState = BatMachine.queryNumAni;\n        batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumAni\\n'));\n      }\n    }\n\n    else if (BatState === BatMachine.queryNumAni) {\n      numAnimations = parseInt(respStr);\n\n      if (numAnimations === 0) {\n        console.log('Same blah blah broken blah blah');\n        return;\n      }\n\n      // Send the query for the first animation to start the fun\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetAni 0\\n'));\n      BatState = BatMachine.gatherAnimations;\n    }\n\n    else if (BatState === BatMachine.gatherAnimations) {\n      console.log('Animation ' + currentAnimation + ': ' + respStr);\n      let localAnimations = this.state.allAnimations;\n      localAnimations.push({\n        name: respStr,\n        index: currentAnimation\n      })\n\n      currentAnimation++;\n\n      this.setState(() => {\n        return {\n          allAnimations: localAnimations\n        }\n      })\n\n      if (numAnimations > currentAnimation) {\n        let queryString = 'GetAni ' + currentAnimation + '\\n';\n        batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      }\n      else {\n        console.log('I have received all of my animations?');\n        console.log(localAnimations);\n      }\n    }\n\n  }\n\n\n  makeAniButton(data) {\n    return (\n      <li key={data.name}>\n        <button>\n            {data.name}\n        </button>\n        </li>\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title='BAT Controller'/>\n        {!this.state.connected &&\n        <button onClick={this.onClickConnect}>\n          Connect\n        </button>\n        }\n        <ul>\n          {this.state.allPatterns.map(makeButton, this)}\n        </ul>\n        <ul>\n          {this.state.allAnimations.map(this.makeAniButton)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}