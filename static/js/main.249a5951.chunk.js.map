{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["batTreeCharacteristic","BatMachine","BatState","numPatterns","currentPattern","numAnimations","currentAnimation","sayHi","filters","push","name","options","optionalServices","console","log","JSON","stringify","navigator","bluetooth","requestDevice","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","handleChangeBlah","startNotifications","_","writeValueWithoutResponse","TextEncoder","encode","catch","error","event","respStr","String","fromCharCode","apply","Uint8Array","target","value","buffer","parseInt","queryString","App","React","version","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wHAIIA,E,mDAmBEC,EAIU,GAJVA,EAOa,GAPbA,EAUU,GAVVA,EAae,GAKjBC,EAjBQ,GAkBRC,EAAc,EACdC,EAAiB,EACjBC,EAAgB,EAChBC,EAAmB,EAEvB,SAASC,IAEP,IAAIC,EAAU,GACdA,EAAQC,KAAK,CAACC,KAAM,aACpB,IAAIC,EAAU,GACdA,EAAQH,QAAUA,EAClBG,EAAQC,iBAAmB,CAAC,OAE5BC,QAAQC,IAAI,kCACZD,QAAQC,IAAI,QAAUC,KAAKC,UAAUL,IACrCM,UAAUC,UAAUC,cAAcR,GACjCS,MAAK,SAAAC,GAGJ,OAFAR,QAAQC,IAAI,gCACIO,EACKC,KAAKC,aAE3BH,MAAK,SAAAI,GAEJ,OADAX,QAAQC,IAAI,8BACLU,EAAOC,kBAAkB,UAEjCL,MAAK,SAAAM,GAEJ,OADAb,QAAQC,IAAI,oCACLY,EAAQC,kBAAkB,UAElCP,MAAK,SAAAQ,GACJf,QAAQC,IAAI,mCACZd,EAAwB4B,GACFC,iBAAiB,6BAA8BC,GACrE9B,EAAsB+B,wBAEvBX,MAAK,SAAAY,GACJ9B,EAAWD,EACXD,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAO,gBAE1EC,OAAM,SAAAC,GACLxB,QAAQC,IAAI,UAAYuB,MAK5B,SAASP,EAAiBQ,GACxB,IAAIC,EAAUC,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWL,EAAMM,OAAOC,MAAMC,SAChF,GAAgB,QAAZP,GAKJ,GAAIrC,IAAaD,EAAwB,CAKvC,GAJAE,EAAc4C,SAASR,GACvB1B,QAAQC,IAAI,6BAA+BX,GAGvB,IAAhBA,EAEF,YADAU,QAAQC,IAAI,uEAKdd,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAO,eACzE/B,EAAiB,EACjBF,EAAWD,OAGR,GAAIC,IAAaD,EAIpB,GAFAY,QAAQC,IAAI,WAAaV,EAAiB,KAAOmC,GAE7CpC,EAAcC,EAAgB,CAChC,IAAI4C,EAAc,UAAY5C,EAAiB,KAC/CJ,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAOa,IACzE5C,SAGAS,QAAQC,IAAI,uCACZZ,EAAWD,EACXD,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAO,kBAIxE,GAAIjC,IAAaD,EAAwB,CAG5C,GAAsB,KAFtBI,EAAgB0C,SAASR,IAIvB,YADA1B,QAAQC,IAAI,mCAKdd,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAO,eACzE7B,EAAmB,EACnBJ,EAAWD,OAGR,GAAIC,IAAaD,EAGpB,GAFAY,QAAQC,IAAI,aAAeR,EAAmB,KAAOiC,GAEjDlC,EAAgBC,EAAkB,CACpC,IAAI0C,EAAc,UAAY1C,EAAmB,KACjDN,EAAsBiC,2BAA0B,IAAIC,aAAcC,OAAOa,IACzE1C,SAGAO,QAAQC,IAAI,8CA3DdD,QAAQC,IAAI,oCAuFDmC,MAhBf,WAME,OALApC,QAAQC,IAAI,aACZD,QAAQC,IAAIoC,IAAMC,SAKhB,sBAAKC,UAAU,MAAf,UACE,mDACA,wBAAQC,QAAS9C,EAAjB,yBC9JS+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.249a5951.chunk.js","sourcesContent":["import React from \"react\"\nimport './App.css';\n\nvar batTreeDevice;\nvar batTreeCharacteristic;\n\n// State machine\n// 1. Connect, and all that crap\n// 2. Query for number of patterns\n// 3. Gather all of the patterns, and print them\n// 4. Query for number of animations\n// 5. Gather all of the animations, and print them\n// 6. Hang out ready to rock!\n//    -- Open settings tab\n//    7. Query brightness\n//    8. Query volume\n//    9. Set brightness\n//    9a. Get brightness\n//    10. Set volume\n//    10a. Get volume\n// 11. Set pattern or animation\n// 12. Turn off the tree.\n\nconst BatMachine = {\n  connect : {\n    //nextState: queryNumPat\n  },\n  queryNumPat : {\n    //nextState : gatherPatterns\n  },\n  gatherPatterns : {\n    //nextState : queryNumAni\n  },\n  queryNumAni : {\n    //nextState : queryAnimations\n  },\n  gatherAnimations : {\n\n  }\n}\n\nlet BatState = BatMachine.connect;\nlet numPatterns = 0;\nlet currentPattern = 0;\nlet numAnimations = 0;\nlet currentAnimation = 0;\n\nfunction sayHi()\n{\n  let filters = [];\n  filters.push({name: \"BAT Tree\"});\n  let options = {};\n  options.filters = filters;\n  options.optionalServices = [0xFFE0];\n  //options.filters = filters;\n  console.log('Reqeusting Bluetooth Device...');\n  console.log('with ' + JSON.stringify(options));\n  navigator.bluetooth.requestDevice(options)\n  .then(device => {\n    console.log('Connecting to GATT Server...');\n    batTreeDevice = device;\n    return batTreeDevice.gatt.connect();\n  })\n  .then(server => {\n    console.log('Getting Primary Service...');\n    return server.getPrimaryService(0xFFE0);\n  })\n  .then(service => {\n    console.log('Getting Custom Characteristic...');\n    return service.getCharacteristic(0xFFE1);\n  })\n  .then(characteristic => {\n    console.log('We got all the way to the end!');\n    batTreeCharacteristic = characteristic;\n    batTreeCharacteristic.addEventListener('characteristicvaluechanged', handleChangeBlah);\n    batTreeCharacteristic.startNotifications();\n  })\n  .then(_ => {\n    BatState = BatMachine.queryNumPat;\n    batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumPat\\n'));\n  })\n  .catch(error => {\n    console.log('WRONG! ' + error);\n  });\n\n}\n\nfunction handleChangeBlah(event) {\n  let respStr = String.fromCharCode.apply(null, new Uint8Array(event.target.value.buffer));\n  if (respStr === \"EOE\") {\n    console.log(\"Let us ignore the EOE, shall we?\");\n    return;\n  }\n\n  if (BatState === BatMachine.queryNumPat) {\n    numPatterns = parseInt(respStr);\n    console.log('The number of patterns is ' + numPatterns);\n\n    // Now that we have the number of patterns, let's get them\n    if (numPatterns === 0) {\n      console.log('Uh... I guess I need to handle this. But for now, it will break me.');\n      return;\n    }\n\n    // Send the query for the first pattern to start the fun\n    batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetPat 0\\n'));\n    currentPattern = 1;\n    BatState = BatMachine.gatherPatterns;\n  }\n\n  else if (BatState === BatMachine.gatherPatterns) {\n\n    console.log('Pattern ' + currentPattern + ': ' + respStr);\n\n    if (numPatterns > currentPattern) {\n      let queryString = 'GetPat ' + currentPattern + '\\n';\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      currentPattern++;\n    }\n    else {\n      console.log('I have received all of my patterns?');\n      BatState = BatMachine.queryNumAni;\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumAni\\n'));\n    }\n  }\n\n  else if (BatState === BatMachine.queryNumAni) {\n    numAnimations = parseInt(respStr);\n\n    if (numAnimations === 0) {\n      console.log('Same blah blah broken blah blah');\n      return;\n    }\n\n    // Send the query for the first animation to start the fun\n    batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetAni 0\\n'));\n    currentAnimation = 1;\n    BatState = BatMachine.gatherAnimations;\n  }\n\n  else if (BatState === BatMachine.gatherAnimations) {\n    console.log('Animation ' + currentAnimation + ': ' + respStr);\n\n    if (numAnimations > currentAnimation) {\n      let queryString = 'GetAni ' + currentAnimation + '\\n';\n      batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      currentAnimation++;\n    }\n    else {\n      console.log('I have received all of my animations?');\n    }\n  }\n  \n  //batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumAni\\n'));\n\n  //console.log(event);\n  //console.log('What it say: ' + respStr);\n\n}\n\n\nfunction App() {\n  console.log('Hey there')\n  console.log(React.version)\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>BAT Trees are fun</h1>\n      <button onClick={sayHi}>\n        Connect\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}