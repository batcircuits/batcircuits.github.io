{"version":3,"sources":["Animations.js","Header.js","Patterns.js","SettingsModal.js","App.js","index.js"],"names":["Animations","props","animations","map","animation","key","className","onClick","onAnimationClick","name","Header","title","Patterns","patterns","pattern","onPatternClick","SettingsModal","isOpen","settingsActive","onRequestClose","handleModalClose","contentLabel","ariaHideApp","closeTimeoutMS","decBrightness","type","disabled","value","brightPct","incBrightness","decVolume","volPct","incVolume","BatState","numPatterns","currentPattern","numAnimations","currentAnimation","App","state","connected","allPatterns","allAnimations","brightness","volume","batTreeDevice","undefined","batTreeCharacteristic","onClickConnect","filters","push","optionalServices","console","log","options","JSON","stringify","navigator","bluetooth","requestDevice","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","handleChangeBlah","startNotifications","setState","writeValueWithoutResponse","TextEncoder","encode","catch","error","setPattern","patNum","setAnimation","aniNum","handleIncBright","handleDecBright","handleIncVol","handleDecVol","bind","event","respStr","String","fromCharCode","apply","Uint8Array","target","buffer","parseInt","this","localPatterns","index","allPaterns","queryString","localAnimations","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bbafd5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Animations = (props) => (\r\n  <div>\r\n  {props.animations.map((animation, key) => (\r\n    <div key={key}>\r\n      <button \r\n        className='pattern-button'\r\n        onClick={() => {props.onAnimationClick(key)}}\r\n      >\r\n        {animation.name}\r\n      </button>\r\n    </div>\r\n  ))}\r\n  </div>\r\n)\r\n\r\nexport default Animations","import React from 'react';\r\n\r\nconst Header = (props) => (\r\n  <div className='header'>\r\n    <h1>{props.title}</h1>\r\n  </div>\r\n)\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Patterns = (props) => (\r\n  <div>\r\n  {props.patterns.map((pattern, key) => (\r\n    <div key={key}>\r\n      <button \r\n        className='pattern-button'\r\n        onClick={() => {props.onPatternClick(key)}}\r\n      >\r\n        {pattern.name}\r\n      </button>\r\n    </div>\r\n  ))}\r\n  </div>\r\n)\r\n\r\nexport default Patterns","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nconst SettingsModal = (props) => (\r\n  <Modal\r\n    isOpen={props.settingsActive}\r\n    onRequestClose={props.handleModalClose}\r\n    contentLabel='Settings'\r\n    ariaHideApp={false}\r\n    closeTimeoutMS={200}\r\n    className='modal'\r\n  >\r\n    <h3 className='modal__title'>Settings</h3>\r\n    <p className='modal__desc'>Brightness</p>\r\n    <div>\r\n      <button className='setButt' onClick={props.decBrightness}>-</button>\r\n      <input className='setText' type='text' disabled={true} value={props.brightPct} />\r\n      <button className='setButt' onClick={props.incBrightness}>+</button>\r\n    </div>\r\n    <p className='modal__desc'>Volume</p>\r\n    <div>\r\n      <button className='setButt' onClick={props.decVolume}>-</button>\r\n      <input className='setText' type='text' disabled={true} value={props.volPct} />\r\n      <button className='setButt' onClick={props.incVolume}>+</button>\r\n    </div>\r\n    \r\n    <button className='specialButton' onClick={props.handleModalClose}>Okie Dokie</button>\r\n  </Modal>\r\n)\r\n\r\nexport default SettingsModal;","import React from \"react\"\nimport './App.css';\nimport Animations from './Animations.js'\nimport Header from './Header.js';\nimport Patterns from './Patterns.js';\nimport SettingsModal from './SettingsModal.js'\n\n// State machine\n// 1. Connect, and all that crap\n// 2. Query for number of patterns\n// 3. Gather all of the patterns, and print them\n// 4. Query for number of animations\n// 5. Gather all of the animations, and print them\n// 6. Hang out ready to rock!\n//    -- Open settings tab\n//    7. Query brightness\n//    8. Query volume\n//    9. Set brightness\n//    9a. Get brightness\n//    10. Set volume\n//    10a. Get volume\n// 11. Set pattern or animation\n// 12. Turn off the tree.\n\n\nlet BatState = 'connect';\nlet numPatterns = 0;\nlet currentPattern = 0;\nlet numAnimations = 0;\nlet currentAnimation = 0;\n\n\nclass App extends React.Component {\n  state = {\n    connected: false,\n    settingsActive: false,\n    allPatterns: [],\n    allAnimations: [],\n    brightness: 0,\n    volume: 0\n  }\n  batTreeDevice = undefined;\n  batTreeCharacteristic = undefined;\n  \n  constructor(props) {\n    super(props);\n\n    // Set this binding\n    this.handleChangeBlah = this.handleChangeBlah.bind(this);\n  }\n\n  onClickConnect = () => {\n    // Try to find the BAT Tree device\n    let filters = [];\n    filters.push({name: \"BAT Tree\"});\n    let optionalServices = ['0000ffe0-0000-1000-8000-00805f9b34fb'];\n    console.log(optionalServices);\n    let options = {};\n    options.filters = filters;\n    options.optionalServices = optionalServices;\n    console.log('Requesting Bluetooth Device...');\n    console.log('with ' + JSON.stringify(options));\n\n    // Request the device with the options\n    navigator.bluetooth.requestDevice(options)\n\n    // If success, connect to GATT server\n    .then(device => {\n      console.log('Connecting to GATT Server...');\n      this.batTreeDevice = device;\n      return this.batTreeDevice.gatt.connect();\n    })\n\n    // Grab the primary service for the BLE controller\n    .then(server => {\n      console.log('Getting Primary Service...');\n      return server.getPrimaryService(0xFFE0);\n    })\n\n    // Connect to the characteristic\n    .then(service => {\n      console.log('Getting Custom Characteristic...');\n      return service.getCharacteristic(0xFFE1);\n    })\n\n    // Register callback when connected to characteristic\n    .then(characteristic => {\n      console.log('We got all the way to the end!');\n      this.batTreeCharacteristic = characteristic;\n      this.batTreeCharacteristic.addEventListener('characteristicvaluechanged', this.handleChangeBlah);\n      this.batTreeCharacteristic.startNotifications();\n\n      //  Update the state so connect goes away\n      this.setState(() => {\n        return {\n          connected: true\n        }\n      })\n    })\n    .then(() => {\n      BatState = 'queryNumPat';\n      this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumPat\\n'));\n    })\n    .catch(error => {\n      console.log('WRONG! ' + error);\n    });\n\n  }\n\n\n\n  \n  handleChangeBlah(event) {\n    let respStr = String.fromCharCode.apply(null, new Uint8Array(event.target.value.buffer));\n    if (respStr === \"EOE\") {\n      console.log(\"Let us ignore the EOE, shall we?\");\n      return;\n    }\n\n    if (BatState === 'queryNumPat') {\n      numPatterns = parseInt(respStr);\n      console.log('The number of patterns is ' + numPatterns);\n\n      // Now that we have the number of patterns, let's get them\n      if (numPatterns === 0) {\n        console.log('Uh... I guess I need to handle this. But for now, it will break me.');\n        return;\n      }\n\n      // Send the query for the first pattern to start the fun\n      this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetPat 0\\n'));\n      currentPattern = 0;\n      BatState = 'gatherPatterns';\n    }\n\n    else if (BatState === 'gatherPatterns') {\n\n      console.log('Pattern ' + currentPattern + ': ' + respStr);\n      let localPatterns = this.state.allPatterns;\n\n      localPatterns.push({\n        name: respStr,\n        index: currentPattern\n      })\n      currentPattern++;\n\n      this.setState(() => {\n        return (\n          {\n            allPaterns: localPatterns\n          }\n        )\n      })\n\n      if (numPatterns > currentPattern) {\n        let queryString = 'GetPat ' + currentPattern + '\\n';\n        this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      }\n      else {\n        console.log('I have received all of my patterns?');\n        console.log(localPatterns);\n        BatState = 'queryNumAni';\n        this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('NumAni\\n'));\n      }\n    }\n\n    else if (BatState === 'queryNumAni') {\n      numAnimations = parseInt(respStr);\n\n      if (numAnimations === 0) {\n        console.log('Same blah blah broken blah blah');\n        return;\n      }\n\n      // Send the query for the first animation to start the fun\n      this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetAni 0\\n'));\n      BatState = 'gatherAnimations';\n    }\n\n    else if (BatState === 'gatherAnimations') {\n      console.log('Animation ' + currentAnimation + ': ' + respStr);\n      let localAnimations = this.state.allAnimations;\n      localAnimations.push({\n        name: respStr,\n        index: currentAnimation\n      })\n\n      currentAnimation++;\n\n      this.setState(() => {\n        return {\n          allAnimations: localAnimations\n        }\n      })\n\n      if (numAnimations > currentAnimation) {\n        let queryString = 'GetAni ' + currentAnimation + '\\n';\n        this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(queryString));\n      }\n      else {\n        console.log('I have received all of my animations?');\n        console.log(localAnimations);\n\n        this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetBright\\n'));\n        BatState = 'queryBright';\n      }\n    }\n\n    else if (BatState === 'queryBright') {\n      const brightness = (parseInt(respStr)+1)/5*100;\n      this.setState(() => ({ brightness }));\n\n      BatState = 'queryVol';\n      this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode('GetVol\\n'));\n    }\n\n    else if (BatState === 'queryVol') {\n      const volume = (parseInt(respStr)+1)/8*100;\n      this.setState(() => ({ volume }));\n      \n      BatState = 'readyToRock';\n    }\n\n    else {\n      console.log(`Response: ${respStr}`);\n    }\n\n  }\n\n  handleModalClose = () => {\n    this.setState(() => ({settingsActive: false}));\n  }\n\n  setPattern = (patNum) => {\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`SetPat ${patNum}\\n`));\n  }\n\n  setAnimation = (aniNum) => {\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`SetAni ${aniNum}\\n`));\n  }\n\n  handleIncBright = () => {\n    BatState = 'queryBright';\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`IncBright\\n`));\n  }\n\n  handleDecBright = () => {\n    BatState = 'queryBright';\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`DecBright\\n`));\n  }\n\n  handleIncVol = () => {\n    BatState = 'queryVol';\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`IncVol\\n`));\n  }\n\n  handleDecVol = () => {\n    BatState = 'queryVol';\n    this.batTreeCharacteristic.writeValueWithoutResponse(new TextEncoder().encode(`DecVol\\n`));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title='BAT Controller'/>\n        \n        {!this.state.connected &&\n          <button className='specialButton' onClick={this.onClickConnect}>\n            Connect\n          </button>\n        }\n        <div className='container'>\n          <Patterns \n            patterns={this.state.allPatterns} \n            onPatternClick={this.setPattern}\n          />\n          <Animations\n            animations={this.state.allAnimations}\n            onAnimationClick={this.setAnimation}\n          />\n          {this.state.connected && \n            <button className='specialButton' onClick={() => {this.setState(() => ({settingsActive: true}))}}>Settings</button>}\n        </div>\n        <SettingsModal \n          settingsActive={this.state.settingsActive}\n          handleModalClose={this.handleModalClose}\n          brightPct={this.state.brightness}\n          volPct={this.state.volume}\n          incBrightness={this.handleIncBright}\n          decBrightness={this.handleDecBright}\n          incVolume={this.handleIncVol}\n          decVolume={this.handleDecVol}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}